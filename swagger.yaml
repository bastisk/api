swagger: "2.0"
info:
  description: "This is a prototype Karmakurier server.  You can find out more about Karmakurier at [http://karmakurier.org]"
  version: "1.0.0"
  title: "Karmakurier"
  termsOfService: "http://karmakurier.org/"
  contact:
    email: "can.kaymakci@live.de"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "karmakurier.org"
basePath: "/v1"
tags:
- name: "missions"
  description: "Everything about Missions"
  externalDocs:
    description: "Your key to the world of missions in Karmakurier"
    url: "http://karmakurier.org"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /missions:
    post:
      tags:
      - "missions"
      summary: "Add a new mission to the database"
      description: "A new mission can be created by initializing a new mission with the data that has to be either filled into a form or can be posted via HTTP"
      operationId: "addMission"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Mission object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Mission"
      responses:
        405:
          description: "Invalid input"
      security:
      - karma_auth:
        - "write:missions"
        - "read:missions"
    put:
      tags:
      - "missions"
      summary: "Update an existing Mission"
      description: "Update a mission when something is happened like an event or when the mission was accomplished. Normally this method is going to be used automatically or by an admin"
      operationId: "updateMission"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Mission that needs to be updated to an event"
        required: true
        schema:
          $ref: "#/definitions/Mission"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Mission not found"
        405:
          description: "Validation exception"
      security:
      - karma_auth:
        - "write:missions"
        - "read:missions"
  /missions/findByStatus:
    get:
      tags:
      - "missions"
      summary: "Finds Missions by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findMissionsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "open"
          - "pending"
          - "done"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Mission"
        400:
          description: "Invalid status value"
      security:
      - karma_auth:
        - "write:missions"
        - "read:missions"
  /missions/findByCategories:
    get:
      tags:
      - "missions"
      summary: "Finds Missions by Categories"
      description: "Muliple categories can be provided with comma separated strings"
      operationId: "findMissionByCategories"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categories"
        in: "query"
        description: "Categories to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Mission"
        400:
          description: "Invalid tag value"
      security:
      - karma_auth:
        - "write:missions"
        - "read:missions"
  /missions/{id}:
    get:
      tags:
      - "missions"
      summary: "Find mission by ID"
      description: "Returns a single mission"
      operationId: "getMissionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of mission to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Mission"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Mission not found"
      security:
      - api_key: []
    post:
      tags:
      - "missions"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of mission that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the mission"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the mission"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - karma_auth:
        - "write:missions"
        - "read:missions"
    delete:
      tags:
      - "mission"
      summary: "Deletes a mission"
      description: ""
      operationId: "deleteMission"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "Mission id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Mission not found"
      security:
      - karma_auth:
        - "write:missions"
        - "read:missions"
  /missions/{id}/uploadReceipt:
    post:
      tags:
      - "missions"
      summary: "uploads an receipts"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of mission to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - karma_auth:
        - "write:missions"
        - "read:missions"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  karma_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:missions: "modify missions in your account"
      read:missions: "show your missions"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Receipt:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      createdAt:
        type: "number"
      url:
        type: "string"
  Item:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      quantity:
        type: "integer"
      checked:
        type: "boolean"
    xml:
      name: "Item"
  Mission:
    type: "object"
    required:
    - "name"
    - "userId"
    properties:
      id:
        type: "integer"
        format: "int64"
      karmaPoints:
        type: "integer"
        format: "int32"
      name:
        type: "string"
        example: "doggie"
      receipts:
        $ref: "#/definitions/Receipt"
      category:
        $ref: "#/definitions/Category"
      actionList:
        $ref: "#/definitions/Item"
      status:
        type: "string"
        description: "Mission status"
        enum:
        - "open"
        - "pending"
        - "done"
      paymentStatus:
        type: "string"
      isReviewed:
        type: "boolean"
      maxPrice: 
        type: "integer"
        format : "int32"
      address: 
        type: "string"
    xml:
      name: "Mission"
    
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"